/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Competiciones.java
 *
 * Created on Nov 3, 2011, 5:06:51 PM
 */

package dispositivomovil.Apuestas;

import WebServices.DispMovilWS.DataCompeticion;
import WebServices.DispMovilWS.DataGoleador;
import WebServices.DispMovilWS.ListBeanDataIdNombre;
import WebServices.DispMovilWS.DataIdNombre;
import WebServices.DispMovilWS.DataPaqueteApuestasWS;
import WebServices.DispMovilWS.DataPartido;
import WebServices.DispMovilWS.DispMovilWS;
import WebServices.DispMovilWS.DispMovilWSService;
import WebServices.DispMovilWS.TipoCompeticion;
import dispositivomovil.DispositivoMovil;
import dispositivomovil.objetos.Competicion;
import java.io.FileInputStream;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.xml.namespace.QName;

/**
 *
 * @author tprog084
 */
public class Competiciones extends javax.swing.JPanel {

    /** Creates new form Competiciones */
    public Competiciones(JFrame m) {

        initComponents();

        this.setOpaque(false);
        this.dispMov = (DispositivoMovil) m;
        this.dispMov.botonAtras.setEnabled(true);
        this.jLabelError.setText("");
        this.jButton4.setEnabled(!this.dispMov.nickUsuLogueado.equals(""));

        list = new ArrayList<Competicion>();
        try{
            if (((DispositivoMovil)m).online){
                
                Properties prop = new Properties();
                FileInputStream fis = new FileInputStream("web_services.xml");
                prop.loadFromXML(fis);
                String dir = prop.getProperty("dir_publicar");

                DispMovilWSService dms = new DispMovilWSService(new java.net.URL("http://"+dir+":8280/dispMovilWS?wsdl"),
                        new javax.xml.namespace.QName("http://WebServices/", "DispMovilWSService"));
                DispMovilWS disp = dms.getDispMovilWSPort();

                List<DataIdNombre> lista = disp.listarCompetencias().getList();

                list = new ArrayList<Competicion>();
                for (DataIdNombre ff : lista){
                    Competicion c = new Competicion();
                    c.setId(ff.getId());
                    c.setNombre(ff.getNombre());

                    list.add(c);
                }
            } else {
                // Idem a lo del catch!!!
                list = new ArrayList<Competicion>();
                List comps = this.dispMov.em.createQuery("Select c from Competicion c").getResultList();
                for (Object ff : comps){
                    list.add(((Competicion)ff));
                }
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
            ((DispositivoMovil)m).online = false;
            ImageIcon imIcon= new ImageIcon("images/desconectado.png");
            this.dispMov.jLabel1.setIcon(new ImageIcon(imIcon.getImage().getScaledInstance(20,20,20)));
            ((DispositivoMovil)(this.dispMov)).timer.start();

            list = new ArrayList<Competicion>();
            List comps = this.dispMov.em.createQuery("Select c from Competicion c").getResultList();
            for (Object ff : comps){
                list.add(((Competicion)ff));
            }
        }

        String [] s = new String[list.size()];

        for (int i =0;i<list.size();i++) {
            s[i]= list.get(i).getNombre();
        }

        this.jList1.setListData(s);

        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);

        ImageIcon ic = new ImageIcon("images/ap.png");
        ImageIcon im = new ImageIcon(ic.getImage().getScaledInstance(15,15,15));
        this.jButton1.setIcon(im);
        this.jButton2.setIcon(im);
        this.jButton3.setIcon(im);

        ImageIcon icC = new ImageIcon("images/carrito.png");
        ImageIcon imC = new ImageIcon(icC.getImage().getScaledInstance(15,15,15));
        this.jButton4.setIcon(imC);

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabelError = new javax.swing.JLabel();

        setOpaque(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Seleccione una competicion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setOpaque(false);

        jScrollPane2.setOpaque(false);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setOpaque(false);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jButton3.setBackground(java.awt.Color.darkGray);
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Apostar Campeon");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(java.awt.Color.darkGray);
        jButton4.setForeground(java.awt.Color.white);
        jButton4.setText("Ver Paquete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setBackground(java.awt.Color.darkGray);
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Apostar Partido");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(java.awt.Color.darkGray);
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Apostar Goleador");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelError.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabelError.setForeground(new java.awt.Color(255, 0, 0));
        jLabelError.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelError)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabelError)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        // Tengo que fijarme si hay conexion sino lanzo un JOptionPane
        if (this.dispMov.online) {
            // Tengo conexion
            try {
                Properties prop = new Properties();
                FileInputStream stream = new FileInputStream("web_services.xml");
                prop.loadFromXML(stream);
                String dir = prop.getProperty("dir_publicar");

                DispMovilWSService serv = new DispMovilWSService(new URL("http://"+dir+":8280/dispMovilWS?wsdl"),
                        new QName("http://WebServices/","DispMovilWSService"));

                DispMovilWS proxy = serv.getDispMovilWSPort();

                if (proxy.verInfoCompeticion(this.dispMov.nickUsuLogueado, idComp).getTipo()==TipoCompeticion.PARTIDO_INDIVIDUAL)
                    throw new Exception("Tipo de competicion invalida");

                List<DataGoleador> goleadores = proxy.obtenerJugadoresCampeonato(idComp).getGoleadores();
                proxy.seleccionarCompeticion(this.dispMov.nickUsuLogueado, idComp);

                ApostarGoleadores ap = new ApostarGoleadores(this.dispMov, this.idComp, goleadores);
                this.dispMov.jDesktopPane1.add(ap);
                ap.setVisible(true);
                ap.setSize(320,420);
                this.removeAll();
                this.dispMov.jDesktopPane1.remove(this);
            }
            catch (Exception exc) {
                if (exc.getMessage().contains("WSDL")) {
                    // Hubo error de conexion
                    this.jLabelError.setText("Error: Se ha perdido la conexion");
                    this.dispMov.online=false;
                    ImageIcon imIcon= new ImageIcon("images/desconectado.png");
                    this.dispMov.jLabel1.setIcon(new ImageIcon(imIcon.getImage().getScaledInstance(20,20,20)));
                    ((DispositivoMovil)(this.dispMov)).timer.start();
                } else {
                    this.jLabelError.setText("Error: "+exc.getMessage());
                }
            }
            
        } else {
            this.jLabelError.setText("Error: Sin conexion");
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formFocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (this.dispMov.online) {
            // Tengo conexion
            try {
                Properties prop = new Properties();
                FileInputStream stream = new FileInputStream("web_services.xml");
                prop.loadFromXML(stream);
                String dir = prop.getProperty("dir_publicar");

                DispMovilWSService serv = new DispMovilWSService(new URL("http://"+dir+":8280/dispMovilWS?wsdl"),
                        new QName("http://WebServices/","DispMovilWSService"));

                DispMovilWS proxy = serv.getDispMovilWSPort();

                proxy.verInfoCompeticion(this.dispMov.nickUsuLogueado, idComp);
                List<DataPartido> parts = proxy.infoPartidosCompeticion(this.dispMov.nickUsuLogueado).getList();

                proxy.seleccionarCompeticion(this.dispMov.nickUsuLogueado, idComp);

                Partidos ap = new Partidos(this.dispMov, this.idComp, parts);

                this.dispMov.jDesktopPane1.add(ap);
                ap.setVisible(true);
                ap.setSize(320,420);
                this.removeAll();
                this.dispMov.jDesktopPane1.remove(this);
            }
            catch (Exception exc) {
                if (exc.getMessage().contains("WSDL")) {
                    // Hubo error de conexion
                    this.jLabelError.setText("Error: Se ha perdido la conexion");
                    this.dispMov.online=false;
                    ImageIcon imIcon= new ImageIcon("images/desconectado.png");
                    this.dispMov.jLabel1.setIcon(new ImageIcon(imIcon.getImage().getScaledInstance(20,20,20)));
                    ((DispositivoMovil)(this.dispMov)).timer.start();
                } else {
                    this.jLabelError.setText("Error: "+exc.getMessage());
                }
            }

        } else {
            this.jLabelError.setText("Error: Sin conexion");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (this.dispMov.online && !this.dispMov.nickUsuLogueado.equals("")) {
            // Tengo conexion
            try {
                Properties prop = new Properties();
                FileInputStream stream = new FileInputStream("web_services.xml");
                prop.loadFromXML(stream);
                String dir = prop.getProperty("dir_publicar");

                DispMovilWSService serv = new DispMovilWSService(new URL("http://"+dir+":8280/dispMovilWS?wsdl"),
                        new QName("http://WebServices/","DispMovilWSService"));

                DispMovilWS proxy = serv.getDispMovilWSPort();

                
                DataPaqueteApuestasWS paq = null;
                try {
                    paq = proxy.mostrarPaqueteApuestas(this.dispMov.nickUsuLogueado);
                }
                catch(Exception e) {
                    this.jLabelError.setText("Error: No ha creado paquete");
                    return;
                }
                
                VerPaquete verPaqPanel = new VerPaquete(this.dispMov,paq);
                this.dispMov.jDesktopPane1.add(verPaqPanel);
                verPaqPanel.setVisible(true);
                verPaqPanel.setSize(320,420);
                this.removeAll();
                this.dispMov.jDesktopPane1.remove(this);
            }
            catch (Exception exc) {
                if (exc.getMessage().contains("WSDL")) {
                    // Hubo error de conexion
                    this.jLabelError.setText("Error: Se ha perdido la conexion");
                    this.dispMov.online=false;
                    ImageIcon imIcon= new ImageIcon("images/desconectado.png");
                    this.dispMov.jLabel1.setIcon(new ImageIcon(imIcon.getImage().getScaledInstance(20,20,20)));
                    ((DispositivoMovil)(this.dispMov)).timer.start();
                } else {
                    this.jLabelError.setText("Error: "+exc.getMessage());
                }
            }

        } else {
            this.jLabelError.setText("Error: Sin conexion");
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        // Tengo que fijarme si hay conexion sino lanzo un JOptionPane
        if (this.dispMov.online) {
            // Tengo conexion
            try {
                Properties prop = new Properties();
                FileInputStream stream = new FileInputStream("web_services.xml");
                prop.loadFromXML(stream);
                String dir = prop.getProperty("dir_publicar");

                DispMovilWSService serv = new DispMovilWSService(new URL("http://"+dir+":8280/dispMovilWS?wsdl"),
                        new QName("http://WebServices/","DispMovilWSService"));
                DispMovilWS proxy = serv.getDispMovilWSPort();

                DataCompeticion dataC = proxy.verInfoCompeticion(this.dispMov.nickUsuLogueado, idComp);
                if (dataC.getTipo()==TipoCompeticion.PARTIDO_INDIVIDUAL)
                    throw new Exception("Tipo de competicion invalida");

                proxy.seleccionarCompeticion(this.dispMov.nickUsuLogueado, idComp);

                ApostarCampeon ap = new ApostarCampeon(this.dispMov, this.idComp, dataC.getDividendos());
                this.dispMov.jDesktopPane1.add(ap);
                ap.setVisible(true);
                ap.setSize(320,420);
                this.removeAll();
                this.dispMov.jDesktopPane1.remove(this);
            }
            catch (Exception exc) {
                if (exc.getMessage().contains("WSDL")) {
                    // Hubo error de conexion
                    this.jLabelError.setText("Error: Se ha perdido la conexion");
                    this.dispMov.online=false;
                    ImageIcon imIcon= new ImageIcon("images/desconectado.png");
                    this.dispMov.jLabel1.setIcon(new ImageIcon(imIcon.getImage().getScaledInstance(20,20,20)));
                    ((DispositivoMovil)(this.dispMov)).timer.start();
                } else {
                    this.jLabelError.setText("Error: "+exc.getMessage());
                }
            }

        } else {
            this.jLabelError.setText("Error: Sin conexion");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (!this.dispMov.nickUsuLogueado.equals("")) {
            this.fila = jList1.getSelectedIndex();
            this.idComp = this.list.get(this.fila).getId();
            this.jButton1.setEnabled(true);
            this.jButton2.setEnabled(true);
            this.jButton3.setEnabled(true);

        }

    }//GEN-LAST:event_jList1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabelError;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private int fila,idComp;
    private DispositivoMovil dispMov;
    private List<Competicion> list;
}
